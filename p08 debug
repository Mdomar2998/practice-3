 gcc -g p1original.c
 gcc -g p08original.c;./a.out
enter the number of sides of the polygon
5
enter the points p1
1
2
enter the points p2
3
4
enter the points p1
1
2
enter the points p2
3
4
enter the points p1
1
2
enter the points p2
3
4
enter the points p1
1
2
enter the points p2
3
4
enter the points p1
1
2
enter the points p2
3
4
the perimeter of the polygon is as follows 14.142136
 gdb ./a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a.out...done.
(gdb) b main
Breakpoint 1 at 0xad5: file p08original.c, line 87.
(gdb) r
Starting program: /home/runner/practice-2/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p08original.c:87
87  {
(gdb) s
89    int n=input_n();
(gdb) s
input_n () at p08original.c:21
21  {
(gdb) s
23    printf("enter the number of sides of the polygon\n");
(gdb) n
enter the number of sides of the polygon
24    scanf("%d",&n);
(gdb) n
1
25    return n;
(gdb) n
26  }
(gdb) n
main () at p08original.c:90
90    input_polygon(n,&p);
(gdb) s
input_polygon (n=1, p=0x7ffe14432e00) at p08original.c:71
71    p->n=n;
(gdb) n
72    input_n_lines(n,p->l);
(gdb) n
enter the points p1
1
2
enter the points p2
3
4
73  }
(gdb) n
main () at p08original.c:91
91    find_perimeter(n,&p);
(gdb) n
92    output(&p);
(gdb) s
output (p=0x7ffe14432e00) at p08original.c:84
84    printf("the perimeter of the polygon is as follows %f\n",p->perimeter);
(gdb) n
the perimeter of the polygon is as follows 2.828427
85  }
(gdb) n
main () at p08original.c:93
93    return 0;
(gdb) c
Continuing.
[Inferior 1 (process 4562) exited normally]
(gdb) p
The history is empty.
(gdb) l
88    Polygon p;
89    int n=input_n();
90    input_polygon(n,&p);
91    find_perimeter(n,&p);
92    output(&p);
93    return 0;
94  }(gdb) 